type token =
  | BACKSLASH
  | EOF
  | EQUAL
  | NEWLINE
  | SHARP
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 22 "src/ttt2/src/input/confParser.mly"
(*** OPENS ********************************************************************)
open ConfSyntax;;
# 15 "src/ttt2/build/input/confParser.ml"
let yytransl_const = [|
  257 (* BACKSLASH *);
    0 (* EOF *);
  258 (* EQUAL *);
  259 (* NEWLINE *);
  260 (* SHARP *);
    0|]

let yytransl_block = [|
  261 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\002\000\002\000\002\000\002\000\
\002\000\002\000\003\000\003\000\003\000\000\000"

let yylen = "\002\000\
\001\000\002\000\003\000\004\000\000\000\001\000\002\000\002\000\
\002\000\002\000\000\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\014\000\002\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\007\000\
\008\000\010\000\009\000\003\000\000\000\000\000\000\000\000\000\
\013\000\004\000\012\000"

let yydgoto = "\002\000\
\007\000\014\000\023\000"

let yysindex = "\019\000\
\001\000\000\000\000\000\001\000\004\255\000\255\000\000\000\000\
\004\255\004\255\000\000\004\255\004\255\001\000\012\255\000\000\
\000\000\000\000\000\000\000\000\018\255\012\255\001\000\012\255\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\
\003\000\003\000\000\000\003\000\003\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\000\000\004\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\252\255\002\000\250\255"

let yytablesize = 264
let yytable = "\008\000\
\003\000\015\000\005\000\011\000\009\000\010\000\011\000\012\000\
\013\000\020\000\016\000\017\000\021\000\018\000\019\000\025\000\
\022\000\027\000\026\000\001\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\005\000\006\000\011\000\011\000"

let yycheck = "\004\000\
\000\000\002\001\000\000\000\000\001\001\002\001\003\001\004\001\
\005\001\014\000\009\000\010\000\001\001\012\000\013\000\022\000\
\005\001\024\000\023\000\001\000\003\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\005\001\003\001\004\001"

let yynames_const = "\
  BACKSLASH\000\
  EOF\000\
  EQUAL\000\
  NEWLINE\000\
  SHARP\000\
  "

let yynames_block = "\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "src/ttt2/src/input/confParser.mly"
       (empty)
# 149 "src/ttt2/build/input/confParser.ml"
               : ConfSyntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ConfSyntax.t) in
    Obj.repr(
# 41 "src/ttt2/src/input/confParser.mly"
                (_2)
# 156 "src/ttt2/build/input/confParser.ml"
               : ConfSyntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comment) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ConfSyntax.t) in
    Obj.repr(
# 42 "src/ttt2/src/input/confParser.mly"
                      (_3)
# 164 "src/ttt2/build/input/confParser.ml"
               : ConfSyntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'strategy) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : ConfSyntax.t) in
    Obj.repr(
# 43 "src/ttt2/src/input/confParser.mly"
                          (add_abbreviation (_1,_3) _4)
# 173 "src/ttt2/build/input/confParser.ml"
               : ConfSyntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "src/ttt2/src/input/confParser.mly"
   ()
# 179 "src/ttt2/build/input/confParser.ml"
               : 'comment))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "src/ttt2/src/input/confParser.mly"
           ()
# 185 "src/ttt2/build/input/confParser.ml"
               : 'comment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 49 "src/ttt2/src/input/confParser.mly"
                     ()
# 192 "src/ttt2/build/input/confParser.ml"
               : 'comment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 50 "src/ttt2/src/input/confParser.mly"
                 ()
# 199 "src/ttt2/build/input/confParser.ml"
               : 'comment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 51 "src/ttt2/src/input/confParser.mly"
              ()
# 207 "src/ttt2/build/input/confParser.ml"
               : 'comment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 52 "src/ttt2/src/input/confParser.mly"
                 ()
# 214 "src/ttt2/build/input/confParser.ml"
               : 'comment))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "src/ttt2/src/input/confParser.mly"
   ("")
# 220 "src/ttt2/build/input/confParser.ml"
               : 'strategy))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'strategy) in
    Obj.repr(
# 57 "src/ttt2/src/input/confParser.mly"
                              (_3)
# 227 "src/ttt2/build/input/confParser.ml"
               : 'strategy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'strategy) in
    Obj.repr(
# 58 "src/ttt2/src/input/confParser.mly"
               (if _2 = "" then _1 else _1^" "^_2)
# 235 "src/ttt2/build/input/confParser.ml"
               : 'strategy))
(* Entry conf *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let conf (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : ConfSyntax.t)
;;
